#+TITLE: Emacs配置文件
#+AUTHOR: 张晓京
#+STARTUP: content 

* Emacs的组件
** 添加package源

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives 
             '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives 
             '("org" . "http://orgmode.org/elpa/"))
(package-initialize)
#+end_src

* Emacs通用设置

** 设置lisp加载目录

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/lisp")
   #+END_SRC
** 编辑器默认行为设置

   设置Eamcs在各种编辑场景下都需要激活的特性。具体包括：
   * Tab键宽度、
   * 设置显示行号、
   * 默认在窗口边缘换行、
   * 光标高亮当前行。

   #+begin_src emacs-lisp
     ;; 设置tab space
     (setq tab-width 4)

     ;; 设置自动显示行号
     ;;(setq linum-format "%4d \u2502") ;;设置行号显示模式，行号边缘添加竖线
     (setq linum-format "%4d ") ;;设置行号显示格
     (global-linum-mode t)

     ;; 设置默认换行模式为“在窗口边缘自动换行”
     (toggle-truncate-lines t)

     ;; 高亮光标的当前行
     (global-hl-line-mode 1)
   #+end_src

** Emacs外观设置
*** 字体设置

    Emacs的界面可以进行大量的定制化设置。为了保证在Emacs中使用中文和英文混排时表格可以对齐，需要对Emacs中的字体进行相应的设置。

**** 等宽字体设置

     set-font函数是设置等宽字体的函数。（但是不等高）

定义字体设置函数。
#+begin_src emacs-lisp
(require 'cl)

(defun set-font (english chinese english-size chinese-size)
  (set-face-attribute 'default nil :font
                      (format "%s:pixelsize=%d" english english-size))
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family chinese :size chinese-size))))
#+end_src

设置Emacs中英文字体，以满足中英文混排时表格对齐要求。这里完成的是Linux和Windows环境下的字体设置。其他系统暂未考虑支持。

在Emacs中由于表格的宽度计算使用了“中文汉字的宽度是英文字母的两倍”的假设。因此，如果要实现表格的对齐，可能需要不同的中英文字体配合。同时字体的大小也存在不一致的情况，以迁就Emacs的“假设”。

在Windows环境下，目前发现可以实现良好显示的中英文字体及大小搭配为：

| English Font name       | Size | Chinese Font Name        | Size |
|-------------------------+------+--------------------------+------|
| Consolas                |   14 | Microsoft Yahei          |   16 |
| Liberation Mono         |   14 | WenQuanyi Micro Hei Mono |   16 |
| DejaVu Sans Mono        |   16 | WenQuanyi Micro Hei Mono |   20 |
| Yahei Mono              |   16 | Yahei Mono               |   16 |
| Dejavu Sans YuanTi Mono |   14 | DejaVu Sans YuanTi Mono  |   16 |

测试中文的字体等宽设计

| English             | 中文                                   |
|---------------------+----------------------------------------|
| 目前的              | 不够等宽                               |
| English             | 不是所有的页面都可以这样               |
| 使用等高字体setting | 成功的解决了字体的缩放和表格对齐的问题 |

#+begin_src emacs-lisp
(case system-type
  (gnu/linux
   (set-face-bold-p 'bold nil)
   (set-face-underline-p 'bold nil)
   (set-font "monofur" "WenQuanyi Micro Hei Mono" 16 16)
  )
  ( windows-nt

     (set-font "Consolas" "Microsoft Yahei" 14 14)
     ;(set-face-attribute 'default nil :font "Consolas-14") 
     ;(dolist (charset '(kana han symbol cjk-misc bopomofo))
     ;    (set-fontset-font  (frame-parameter nil 'font) charset
     ;                 (font-spec :family "Microsoft Yahei")))
     ;(setq face-font-rescale-alist '("Microsoft Yahei" . 1.2))
  )
)
#+end_src

**** 等高字体的设置

     好吧，等宽字体在使用的过程中会出现中英文字体缩放不同步的问题，所以，还是再重新试试看等高字体的设置（[[http://baohaojun.github.io/blog/2012/12/19/perfect-emacs-chinese-font.html][狠狠地折腾了一把Emacs中文字体]] ）。

     这套代码对于我来说还是太复杂了一些。有时间自己再改改。让代码更好用一些。

     #+BEGIN_SRC 
(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil t))

(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size)
           (equal ":" (string (elt font-size 0))))
      (format "%s%s" font-name font-size)
    (format "%s-%s" font-name font-size)))

(defvar bhj-english-font-size nil)
(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-fonts-scale
                       )
  (setq chinese-fonts-scale (or chinese-fonts-scale 1.2))
  (save-excursion
    (with-current-buffer (find-file-noselect "~/.config/emacs-font-size")
      (delete-region (point-min) (point-max))
      (insert (format "%s" english-font-size))
      (save-buffer)
      (kill-buffer)))
  (setq face-font-rescale-alist `(("Microsoft Yahei" . ,chinese-fonts-scale)
                                  ("Microsoft_Yahei" . ,chinese-fonts-scale)
                                  ("微软雅黑" . ,chinese-fonts-scale)
                                  ("WenQuanYi Zen Hei" . ,chinese-fonts-scale)))
  "english-font-size could be set to \":pixelsize=18\" or a integer.
If set/leave chinese-font-size to nil, it will follow english-font-size"
  (require 'cl)                         ; for find if
  (setq bhj-english-font-size english-font-size)
  (let ((en-font (qiang-make-font-string
                  (find-if #'qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #'qiang-font-existsp chinese-fonts))))

    ;; Set the default English font
    ;;
    ;; The following 2 method cannot make the font settig work in new frames.
    ;; (set-default-font "Consolas:pixelsize=18")
    ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
    ;; We have to use set-face-attribute
    (set-face-attribute
     'default nil :font en-font)
    (set-face-font 'italic (font-spec :family "Courier New" :slant 'italic :weight 'normal :size (+ 0.0 english-font-size)))
    (set-face-font 'bold-italic (font-spec :family "Courier New" :slant 'italic :weight 'bold :size (+ 0.0 english-font-size)))

    (set-fontset-font t 'symbol (font-spec :family "Courier New"))
    (set-fontset-font t nil (font-spec :family "DejaVu Sans"))

    ;; Set Chinese font
    ;; Do not use 'unicode charset, it will cause the english font setting invalid
    (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font t charset zh-font))))


(defvar bhj-english-fonts '("Monaco" "Consolas" "DejaVu Sans Mono" "Monospace" "Courier New"))
(defvar bhj-chinese-fonts '("Microsoft Yahei" "Microsoft_Yahei" "微软雅黑" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体"))

(qiang-set-font
 bhj-english-fonts
 (if (file-exists-p "~/.config/emacs-font-size")
     (save-excursion
       (find-file "~/.config/emacs-font-size")
       (goto-char (point-min))
       (let ((monaco-font-size (read (current-buffer))))
         (kill-buffer (current-buffer))
         monaco-font-size))
   12.5)
 bhj-chinese-fonts)

(defvar chinese-font-size-scale-alist nil)

;; On different platforms, I need to set different scaling rate for
;; differnt font size.
(cond
 ((and (boundp '*is-a-mac*) *is-a-mac*)
  (setq chinese-font-size-scale-alist '((10.5 . 1.3) (11.5 . 1.3) (16 . 1.3) (18 . 1.25))))
 ((and (boundp '*is-a-win*) *is-a-win*)
  (setq chinese-font-size-scale-alist '((11.5 . 1.25) (16 . 1.25))))
 (t ;; is a linux:-)
  (setq chinese-font-size-scale-alist '((16 . 1.25)))))

(defvar bhj-english-font-size-steps '(9 10.5 11.5 12.5 14 16 18 20 22))
(defun bhj-step-frame-font-size (step)
  (let ((steps bhj-english-font-size-steps)
        next-size)
    (when (< step 0)
        (setq steps (reverse bhj-english-font-size-steps)))
    (setq next-size
          (cadr (member bhj-english-font-size steps)))
    (when next-size
        (qiang-set-font bhj-english-fonts next-size bhj-chinese-fonts (cdr (assoc next-size chinese-font-size-scale-alist)))
        (message "Your font size is set to %.1f" next-size))))

(global-set-key [(control x) (meta -)] (lambda () (interactive) (bhj-step-frame-font-size -1)))
(global-set-key [(control x) (meta +)] (lambda () (interactive) (bhj-step-frame-font-size 1)))

(set-face-attribute 'default nil :font (font-spec))
     
     #+END_SRC
*** Eamcs界面元素显示状态

Eamcs运行时我不想让工具条和菜单条显示出来，所以关掉。
#+begin_src emacs-lisp
(when (string-equal system-type "windows-nt")
  "在Windows环境中关闭菜单条"
  (menu-bar-mode -1))
;; 关闭工具条
(tool-bar-mode -1)
;; 关闭滚动条
;;(scroll-bar-mode -1)
;; 设置MiniBuffer的最小高度
(setq resize-mini-window nil )
#+end_src

启动时显示启动信息没有用，关闭之。
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)

;;如果安装了fill-column-indicator扩展，则默认激活
(unless (package-installed-p "fill-column-indicator")
  (add-hook 'python-mode-hook 'fci-mode))
#+end_src

*** Theme 设置

    Emacs上有不少Theme。可以到 [[http://emacsthemes.caisah.info][Emacs Themes]] 看看，基本上符合Emacs2.4的Theme都有抓图可以预览效果。

#+begin_src emacs-lisp
;(when window-system (load-theme 'molokai t))
(load-theme 'flatui t)
;(load-theme 'leuven t)

#+end_src

    Trust all themes.
#+begin_src emacs-lisp
(setq custom-safe-themes t)
#+end_src
* Emacs编辑功能设置
** 文件编码

   设置Emacs的默认编码集。考虑到跨操作系统使用Emacs配置文件的需求，使用utf-8作为主要文件编码。

#+begin_src emacs-lisp
(case system-type
  (windows-nt
   (prefer-coding-system 'utf-8)
   (setq file-name-coding-system 'gbk))
  (gnu/linux
   (prefer-coding-system 'utf-8))
)
#+end_src

   设置一些必要的快捷键绑定：
   - 由于Windows上输入法切换键的限制，Contral-Space被占用了。所以添加Alt-Space的组合键作为标记。

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC") 'set-mark)
#+END_SRC

* Pacakge 配置
** EVIL （FREEZED）

   *暂时被停用*
   Emacs有自己的一套键盘移动和编辑的快捷键。在键盘的移动方面，VIM的键盘移动要比Emacs简洁很多。所以，在我的配置文件中，打算启用VIM的编辑键盘模拟功能。
   
   为了降低“ESC”键的使用频率，使用key-chord实现组合按键对应功能的定制

   * 问题：
    - 使用VIM的控制方式，遇到了输入法的频繁切换的问题。估计只能“两害相权，取其轻”了。
    - 使用EVIL只能在部分Buffer（嗯，是大部分），所以，使用Evil的时候感觉有一些轻微的“精神分裂”。要时刻记得“在Minibuffer”中不能使用VIM的操作方式移动光标。嗯，有人要纠正我这个问题吗？

   #+begin_src
     (require 'evil)
     (evil-mode 1)
     (setq evil-default-cursor '(t))

     (key-chord-mode 1)
     (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
     (key-chord-define evil-motion-state-map "jk" 'evil-normal-state)
     (key-chord-define evil-visual-state-map "jk" 'evil-normal-state)
     (key-chord-define evil-emacs-state-map "jk" 'evil-normal-state)
   #+end_src

** org-mode

*** org-mode配置说明

    下列配置内容在如下OrgMode版本中正常使用：
    * 8.2.10

*** 自动换行的设置

    设置ORG Mode下也能够实现自动换行。不过在使用表格的文档中，可能会由于自动换行而导致表格的错乱。这个等我实际遇到的时候再修改吧。

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 
         (lambda () (setq truncate-lines nil)))
    #+END_SRC

*** 配置Capture模板
    设置OrgMode的Capture模板。这样可以
    #+BEGIN_SRC emacs-lisp
      (define-key global-map "\C-cc" 'org-capture)
      (setq org-capture-templates
            '(("b" "Journal(b)" entry (file+datetree "~/Journal/2015-BodyDiary.org.gpg")
               "* %?\n输入于：%<%Y-%m-%d %A %H:%M>\n %i\n")
              ("t" "Taiji(t)" entry (file+datetree "~/Journal/2015-TaijiTraining.org.gpg")
               "* %?\n输入于：%<%Y-%m-%d %A %H:%M>\n\n")))
    #+END_SRC

*** 调整时间戳显示方式（已放弃）

    找到了在模板中配置日期显示方式的方法，一下的HACK的方法不再使用。

    #+BEGIN_QUOTE
      在Ubuntu下默认的星期名仅显示一个中文的数字，我不喜欢。所以改动了Orgmode相应变量。由于这个常量并未开放给用户自定义使用，因此可能会于Orgmode的版本相关。目前看来，问题应该不大。相关变量的说明可以看Eamcs的变量手册 =describe-variable RET org-time-stamp-formats RET=

      修改前：显示的时间戳为：<2015-04-30 四>
      修改后：显示的时间戳为：<2015-04-30 星期四>

      #+BEGIN_SRC emacs-lisp
        (setq org-time-stamp-formats '("<%Y-%m-%d %A>" . "<%Y-%m-%d %A %H:%M>"))
      #+END_SRC/
    #+END_QUOTE

** Markdown

   #+begin_src emacs-lisp
     (autoload 'markdown-mode "markdown-mode"
           "Major mode for editing Markdown files" t)
        (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
        (add-to-list 'auto-mode-alist '("\\.mkd\\'" . markdown-mode))
        (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
   #+end_src

** smex

   一个让在Emacs中输入命令行也能够自动完成的插件，是一个在minibuffer中的ido

   #+BEGIN_SRC emacs-lisp
     ;(require 'smex) ;not needed by using package.el
     (smex-initialize)

     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
     ;; This is your old M-x.
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
   #+END_SRC

** GPG

   在Emacs中使用加密工具GPG。同时配置Emacs使用minibuffer接收加密文档的密码。

   * 使用对称加密方式（symmetric）： See : epa-file-encrypt-to
   * 当启动加密时直接询问密码，不使用选单方式询问密码 See : epa-file-select-keys
   * 在Emacs当前Session中记录用户输入的密码  See: epa-file-cache-passphrase-for-symmetric-encryption

   #+BEGIN_SRC emacs-lisp
     (require 'epa-file)
     (epa-file-enable)
     (setq epa-file-encrypt-to nil)
     ;(setq epa-file-select-keys 0)
     (setq epa-file-cache-passphrase-for-symmetric-encryption t)
     (setenv (concat "GPG_AGENT_INFO" nil))
   #+END_SRC

   #+RESULTS:

** TaskJuggler

   TaskJugger是一个开源的项目管理工具。以文本文件的方式存储各项任务、资源、成本等部分内容的设定。

   #+BEGIN_SRC emacs-lisp
     (require 'taskjuggler-mode )
   #+END_SRC
* 附录

[fn:1] http://baohaojun.github.io/blog/2012/12/19/perfect-emacs-chinese-font.html
  
